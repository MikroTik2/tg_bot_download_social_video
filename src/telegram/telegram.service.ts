import { Ctx, Message, On, Start, Help, Update } from "nestjs-telegraf";
import { CloudinaryService } from "@/cloudinary/cloudinary.service";
import { DownloadService } from '@/download/download.service';
import { ConfigService } from "@nestjs/config";
import { OnModuleInit } from "@nestjs/common";
import { Scenes, Telegraf  } from "telegraf";
import axios from 'axios';

type Context = Scenes.SceneContext;

@Update()
export class TelegramService extends Telegraf<Context> implements OnModuleInit {
    constructor(
        private readonly config: ConfigService,
        private readonly download: DownloadService,
        private readonly cloudinary: CloudinaryService,
    ) {
        super(config.get('TELEGRAM_BOT_TOKEN'));
    };

    async onModuleInit() {

        await axios.post(`https://api.telegram.org/bot${process.env.TELEGRAM_BOT_TOKEN}/deleteWebhook`);
        await axios.post(`https://api.telegram.org/bot${process.env.TELEGRAM_BOT_TOKEN}/setWebhook?url=https://tg-bot-download-social-video.vercel.app/webhook`)

        await this.launch({
            dropPendingUpdates: true,
            webhook: {
                domain: 'tg-bot-download-social-video.vercel.app',
                port: 4000,
                path: '/webhook',
                maxConnections: 10,
            }
        });
    };

    @Start()
    async onStart(@Ctx() ctx: Context) {
        await ctx.replyWithHTML(`
            üëã –ü—Ä–∏–≤–µ—Ç - <strong>${ctx.from.first_name}</strong>! –°–∫–∏–Ω—å —Å—é–¥–∞ —Å—Å—ã–ª–∫—É –∏ —è —Å–¥–µ–ª–∞—é –í–°–ï –Ω–µ —è —Ä–µ–∞–ª—å–Ω–æ —Å–¥–µ–ª–∞ –í–°–ï –Ω–∞–¥–æ –±—É–¥–µ—Ç —Å–æ—Å–∞—Ç—å –±—É–¥—É —Å–æ—Å–∞—Ç—å –µ—Å–ª–∏ –µ—â–µ –Ω–∞–¥–æ –±—É–¥–µ—Ç —á—Ç–æ —Å–¥–µ–ª–∞—Ç—å —Å–¥–µ–ª–∞—é —è –≤–æ–æ–±—â–µ –±–µ–∑ –ø–æ–Ω—è—Ç–∏—è –ê–•–ê–•–ê–•–ê –ê–ê–•–•–ê–ê –Ø –°–ö–£–§ –Ø –ê–†–ò–°–¢–û–ö–†–ê–¢ –Ø –®–£–¢–ù–ò–ö –Ø –î–ñ–û–ö–ï–†.
        `);
    };

    @Help()
    async onHelp(@Ctx() ctx: Context) {
        await ctx.replyWithHTML(
            `‚ÅâÔ∏è<b> –ï—Å–ª–∏ —É —Ç–µ–±—è –µ—Å—Ç—å –ø—Ä–æ–±–ª–µ–º—ã.</b> \n‚úâÔ∏è <b>–ù–∞–ø–∏—à–∏—Ç–µ –º–Ω–µ</b> <a href='https://t.me/d16ddd348'>@d16ddd348</a><b>.</b>`
        );
    };

    @On('text')
    async onMessage(@Message('text') message: string, @Ctx() ctx: Context) {
        if (message.startsWith('https://www.tiktok.com/') || message.startsWith('https://vm.tiktok.com/')) {
            await ctx.replyWithHTML(`<code>–°–æ–æ–±—â–µ–Ω–∏–µ –ø—Ä–∏–Ω—è–ª. –ñ–¥—É –æ—Ç–≤–µ—Ç–∞ –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞...</code>`);
            const info = await this.download.downloadTikTok(message);

            const audio = await this.cloudinary.uploadAudio(info.music);
            const video = await this.cloudinary.uploadVideo(info.play);

            const size = video.bytes / 1048576;

            if (info.images) {

                const media = info.images.map((image, index) => ({
                    type: 'photo',
                    media: { url: image },
                    parse_mode: index === 0 ? 'HTML' : '',
                    caption: index === 0 
                        ? `
–ó–∞–≥–æ–ª–æ–≤–æ–∫: <code>${info.title}</code>,
–†–µ–≥–∏–æ–Ω: <code>${info.region}</code>,
–í–∏–¥–µ–æ ID: <code>${info.id}</code>,
–ê–≤—Ç–æ—Ä ID: <code>${info.author.id}</code>,
–ê–≤—Ç–æ—Ä UniqueId: <code>${info.author.unique_id}</code>,
–ê–≤—Ç–æ—Ä Nickname: <code>${info.author.nickname}</code>,
–ê–≤—Ç–æ—Ä Avatar: <a href="${info.author.avatar}">—Å—Å—ã–ª–∫–∞</a>,
–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤: <code>${info.comment_count}</code>,
                        `
                        : '',
                }))

                ctx.replyWithMediaGroup(media);
                await ctx.sendAudio({ url: audio.secure_url }, {
                    caption: `
–ù–∞–∑–≤–∞–Ω–∏–µ –ø–µ—Å–Ω–∏: <code>${info.music_info.title || '–Ω–µ –Ω–∞–π–¥–µ–Ω–æ'}</code>,
–ù–∞–∑–≤–∞–Ω–∏–µ –∞–ª—å–±–æ–º–∞: <code>${info.music_info.album || '–Ω–µ –Ω–∞–π–¥–µ–Ω–æ'}</code>,
–î–ª–∏–Ω–∞ –≤–∏–¥–µ–æ: <code>${info.duration}</code>,
                    `, parse_mode: 'HTML',
                });
            } else {
                await ctx.replyWithVideo({ url: video.secure_url }, { 
                    caption: `
–ó–∞–≥–æ–ª–æ–≤–æ–∫: <code>${info.title}</code>,
–†–µ–≥–∏–æ–Ω: <code>${info.region}</code>,
–í–∏–¥–µ–æ ID: <code>${info.id}</code>,
–ê–≤—Ç–æ—Ä ID: <code>${info.author.id}</code>,
–ê–≤—Ç–æ—Ä UniqueId: <code>${info.author.unique_id}</code>,
–ê–≤—Ç–æ—Ä Nickname: <code>${info.author.nickname}</code>,
–ê–≤—Ç–æ—Ä Avatar: <a href="${info.author.avatar}">—Å—Å—ã–ª–∫–∞</a>,
–†–∞–∑–º–µ—Ä –≤–∏–¥–µ–æ: <code>${size.toFixed(1)}MB</code>,
–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤: <code>${info.comment_count}</code>,
                    `, parse_mode: 'HTML'
                });
    
                await ctx.sendAudio({ url: audio.secure_url }, {
                    caption: `
–ù–∞–∑–≤–∞–Ω–∏–µ –ø–µ—Å–Ω–∏: <code>${info.music_info.title || '–Ω–µ –Ω–∞–π–¥–µ–Ω–æ'}</code>,
–ù–∞–∑–≤–∞–Ω–∏–µ –∞–ª—å–±–æ–º–∞: <code>${info.music_info.album || '–Ω–µ –Ω–∞–π–¥–µ–Ω–æ'}</code>,
                    `, parse_mode: 'HTML',
                });
            };

        } else if (message.startsWith('https://www.instagram.com/')) {
            await ctx.replyWithHTML(`<code>–°–æ–æ–±—â–µ–Ω–∏–µ –ø—Ä–∏–Ω—è–ª. –ñ–¥—É –æ—Ç–≤–µ—Ç–∞ –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞...</code>`);
            const info = await this.download.downloadInstagram(message);

            const videoUrl = Array.isArray(info?.video_versions) && info.video_versions.length > 0 ? info.video_versions[0].url : info?.main_media_hd;
            const video = await this.cloudinary.uploadVideo(videoUrl);
            const size =  video.bytes / 1048576;

            await ctx.replyWithVideo({ url: video.secure_url }, {
                caption: `
–ù–∏–∫–Ω–µ–π–º: <code>${info?.user?.username || info?.owner?.username}</code>,
–ü–æ–ª–Ω–æ–µ –∏–º—è: <code>${info?.user?.full_name || info?.owner?.full_name}</code>,
–ê–≤–∞—Ç–∞—Ä–∫–∞ –ê–≤—Ç–æ—Ä–∞: <a href="${info?.owner?.profile_pic_url}">—Å—Å—ã–ª–∫–∞</a>
–¢–∏–ø –≤–∏–¥–µ–æ: <code>${info?.product_type || info?.main_media_type}</code>,
–†–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞: <code>${size.toFixed(1)}MB</code>,
                `, parse_mode: 'HTML',

            });

        } else {
            await ctx.replyWithHTML(`–û—à–∏–±–∫–∞ –≤–∏–¥–æ–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –ø—Ä–æ–≤–µ—Ä—å URL: <code>${message}</code>`);
        };
    };
};