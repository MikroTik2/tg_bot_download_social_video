import { ConfigService } from "@nestjs/config";
import { Ctx, Message, On, Start, Help, Action, Update } from "nestjs-telegraf";
import { Scenes, Telegraf  } from "telegraf";
import { DownloadService } from '../download/download.service';
import { OnModuleInit } from "@nestjs/common";

type Context = Scenes.SceneContext;

@Update()
export class TelegramService extends Telegraf<Context> implements OnModuleInit {

            private _message;

            constructor(
                        private readonly config: ConfigService,
                        private readonly download: DownloadService,
            ) {
                        super(config.get('TELEGRAM_BOT_TOKEN'));
            };

            async onModuleInit() {
                await this.createWebhook({
                    domain: 'tg-bot-download.vercel.app',
                    drop_pending_updates: true,
                    path: '/webhook',
                })
            };

            @Start()
            async onStart(@Ctx() ctx: Context) {
                        await ctx.replyWithHTML(`üëã –ü—Ä–∏–≤–µ—Ç - <strong>${ctx.from.first_name}</strong>! –°–∫–∏–Ω—å —Å—é–¥–∞ —Å—Å—ã–ª–∫—É –∏ —è —Å–¥–µ–ª–∞—é –í–°–ï –Ω–µ —è —Ä–µ–∞–ª—å–Ω–æ —Å–¥–µ–ª–∞—é –í–°–ï –Ω–∞–¥–æ –±—É–¥–µ—Ç —Å–æ—Å–∞—Ç—å –±—É–¥—É —Å–æ—Å–∞—Ç—å –µ—Å–ª–∏ –µ—â–µ –Ω–∞–¥–æ –±—É–¥–µ—Ç —á—Ç–æ —Å–¥–µ–ª–∞—Ç—å —Å–¥–µ–ª–∞—é —è –≤–æ–æ–±—â–µ –±–µ–∑ –ø–æ–Ω—è—Ç–∏—è –ê–•–ê–•–ê–•–ê –ê–ê–•–•–ê–ê –Ø –°–ö–£–§ –Ø –ê–†–ò–°–¢–û–ö–†–ê–¢ –Ø –®–£–¢–ù–ò–ö –Ø –î–ñ–û–ö–ï–†.`);
            };

            @Help()
            async onHelp(@Ctx() ctx: Context) {
                        await ctx.replyWithHTML("‚ÅâÔ∏è<b> –ï—Å–ª–∏ —É —Ç–µ–±—è –µ—Å—Ç—å –ø—Ä–æ–±–ª–µ–º—ã.</b> \n‚úâÔ∏è <b>–ù–∞–ø–∏—à–∏—Ç–µ –º–Ω–µ</b> <a href='https://t.me/d16ddd348'>@d16ddd348</a><b>.</b>");
            };

            @Action('format_mp3')
            async sendMp3Video(@Ctx() ctx: Context) {
                        await ctx.replyWithHTML(`<code>–°–æ–æ–±—â–µ–Ω–∏–µ –ø—Ä–∏–Ω—è–ª. –ñ–¥—É –æ—Ç–≤–µ—Ç–∞ –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞...</code>`);

                        const info = await this.download.downloadYouTube(this._message);
                        if (info.error) await ctx.replyWithHTML(info.error);

                        await ctx.sendAudio({ source: info.path }, {
                                    caption: `
–ù–∞–∑–≤–∞–Ω–∏–µ –≤–∏–¥–æ—Å–∞: ${info.info_video.title},
–ê–≤—Ç–æ—Ä: ${info.author.name},
–°—Å—ã–ª–∫–∞: ${info.author.channel_url},
–°—Å—ã–ª–∫–∞ –Ω–∞ –≤–∏–¥–µ–æ: ${info.info_video.video_url},
–ü—Ä–æ—Å–º–æ—Ç—Ä–æ–≤: ${info.info_video.viewCount},            
–ö–∞—Ç–µ–≥–æ—Ä–∏—è: ${info.info_video.category},            
–°–æ–∑–¥–∞–Ω–∏–µ –≤–∏–¥–æ—Å–∞: ${info.info_video.publishDate},            
                                    `,
                        });
            };

            @Action('format_mp4')
            async sendMp4Video(@Ctx() ctx: Context) {
                        await ctx.replyWithHTML(`<code>–°–æ–æ–±—â–µ–Ω–∏–µ –ø—Ä–∏–Ω—è–ª. –ñ–¥—É –æ—Ç–≤–µ—Ç–∞ –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞...</code>`);

                        const info = await this.download.downloadYouTube(this._message);
                        if (info.error) await ctx.replyWithHTML(info.error);

                        await ctx.replyWithVideo({ source: info.path }, {
                                    caption: `
–ù–∞–∑–≤–∞–Ω–∏–µ –≤–∏–¥–æ—Å–∞: ${info.info_video.title},
–ê–≤—Ç–æ—Ä: ${info.author.name},
–°—Å—ã–ª–∫–∞: ${info.author.channel_url},
–°—Å—ã–ª–∫–∞ –Ω–∞ –≤–∏–¥–µ–æ: ${info.info_video.video_url},
–ü—Ä–æ—Å–º–æ—Ç—Ä–æ–≤: ${info.info_video.viewCount},            
–ö–∞—Ç–µ–≥–æ—Ä–∏—è: ${info.info_video.category},            
–°–æ–∑–¥–∞–Ω–∏–µ –≤–∏–¥–æ—Å–∞: ${info.info_video.publishDate},            
                                    `,
                        });
            };

            @On('text')
            async onMessage(@Message('text') message: string, @Ctx() ctx: Context) {
                        if (message.startsWith('https://www.youtube.com/') || message.startsWith('https://youtu.be/')) {

                                    await ctx.reply('–í—ã–±–µ—Ä–∏—Ç–µ —Ñ–æ—Ä–º–∞—Ç –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è:', {
                                                reply_markup: {
                                                            inline_keyboard: [
                                                            [{ text: 'MP4', callback_data: 'format_mp4' }],
                                                            [{ text: 'MP3', callback_data: 'format_mp3' }],
                                                            ],
                                                },
                                    });

                                    this._message = message;
                        };

                        if (message.startsWith('https://www.tiktok.com/')) {
                                    await ctx.replyWithHTML(`<code>–°–æ–æ–±—â–µ–Ω–∏–µ –ø—Ä–∏–Ω—è–ª. –ñ–¥—É –æ—Ç–≤–µ—Ç–∞ –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞...</code>`);
                                    const info = await this.download.downloadTikTok(message);

                                    await ctx.replyWithVideo(info.video[0], {
                                                caption: `
–û–ø–∏—Å–∞–Ω–∏–µ: ${info.description[0]},
–ê–≤—Ç–æ—Ä: ${info.author[0]},
–†–µ–≥–∏–æ–Ω: ${info.region[0]},
–í–∏–¥–µ–æ ID: ${info.videoid[0]},
                                                `
                                    });

                                    await ctx.sendAudio(info.music[0])
                        };
                        
                        if (message.startsWith('https://www.instagram.com/')) {
                                    await ctx.replyWithHTML(`<code>–°–æ–æ–±—â–µ–Ω–∏–µ –ø—Ä–∏–Ω—è–ª. –ñ–¥—É –æ—Ç–≤–µ—Ç–∞ –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞...</code>`);
                                    const info = await this.download.downloadInstagram(message);

                                    await ctx.replyWithVideo(info.media || info.stories[0].media, {
                                                caption: `
–ê–≤—Ç–æ—Ä: ${info.title || info.username}
–ü–æ–ª—å–∑—ã–≤–∞—Ç–µ–ª—å ID: ${info.user_id || '–Ω–µ –Ω–∞–π–¥–µ–Ω'}
                                                `
                                    });
                        };
            };
};